from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
from keras.models import load_model
from keras.layers import Dense

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
        self.model = load_model('basic_model_30_epochs_timestamp_1708659886.keras')
        models.Model(inputs=self.model.input, outputs=self.model.layers[-2].output)
        self.model.trainable = False
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        pass

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        
        # I THINK THIS IS HOW WE DO THIS FUNCTION I HOPE
        for layer in model.layers():
            for w in get_weights():
                # randomize the weights
                pass
            layer.set_weights([]) # input list of random weights

from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
from keras.models import load_model
from keras.layers import Dense

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # use this model by removing the last layer, adding dense layers and an output layer
        self.model = load_model('basic_model_30_epochs_timestamp_1708659886.keras')
        models.Model(inputs=self.model.input, outputs=self.model.layers[-2].output)
        self.model.trainable = False
        self.model.add(Dense(3, activation='relu', kernel_initializer='he_uniform'))

    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001, momentum=0.9),
            loss='binary_crossentropy',
            metrics=['accuracy']
        )
